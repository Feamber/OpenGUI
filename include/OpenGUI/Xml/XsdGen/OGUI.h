// This file is auto-generated by XsdGen

#pragma once
#include <string>
#include <string_view>
#include <optional>
#include <functional>
#include "OpenGUI/Configure.h"
#include "OpenGUI/Xml/XmlFactory.h"


namespace OGUI
{

    class OGUI_API IXmlFactory_Root : public OGUI::IXmlFactory
    {
    public:


        IXmlFactory_Root()
        {
            using namespace literal;

            xml_name = u"Root"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.Root"_name;
            
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };

    class OGUI_API IXmlFactory_Style : public OGUI::IXmlFactory
    {
    public:
        std::string_view path;
        std::optional<std::string_view> path_bind;

        IXmlFactory_Style()
        {
            using namespace literal;

            xml_name = u"Style"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.Style"_name;
            
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };

    class OGUI_API IXmlFactory_Template : public OGUI::IXmlFactory
    {
    public:
        std::string_view name;
        std::optional<std::string_view> name_bind;
        std::string_view path;
        std::optional<std::string_view> path_bind;

        IXmlFactory_Template()
        {
            using namespace literal;

            xml_name = u"Template"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.Template"_name;
            
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };

    class OGUI_API IXmlFactory_AttributeOverrides : public OGUI::IXmlFactory
    {
    public:
        std::string_view element_name;
        std::optional<std::string_view> element_name_bind;

        IXmlFactory_AttributeOverrides()
        {
            using namespace literal;

            xml_name = u"AttributeOverrides"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.AttributeOverrides"_name;
            
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };

    class OGUI_API IXmlFactory_VisualElement : public OGUI::IXmlFactory
    {
    public:
        std::optional<std::string_view> name;
        std::optional<std::string_view> name_bind;
        std::optional<std::string_view> path;
        std::optional<std::string_view> path_bind;
        std::optional<std::string_view> style;
        std::optional<std::string_view> style_bind;
        std::optional<std::string_view> class_tag;
        std::optional<std::string_view> class_tag_bind;
        std::optional<std::string_view> slot_name;
        std::optional<std::string_view> slot_name_bind;
        std::optional<std::string_view> slot;
        std::optional<std::string_view> slot_bind;
        std::optional<bool> focusable;
        std::optional<std::string_view> focusable_bind;
        std::optional<std::string_view> navMode;
        std::optional<std::string_view> navMode_bind;
        std::optional<std::string_view> navExplicitUp;
        std::optional<std::string_view> navExplicitUp_bind;
        std::optional<std::string_view> navExplicitDown;
        std::optional<std::string_view> navExplicitDown_bind;
        std::optional<std::string_view> navExplicitLeft;
        std::optional<std::string_view> navExplicitLeft_bind;
        std::optional<std::string_view> navExplicitRight;
        std::optional<std::string_view> navExplicitRight_bind;
        std::optional<bool> isFocusScope;
        std::optional<std::string_view> isFocusScope_bind;
        std::optional<bool> isKeeyScopeFocused;
        std::optional<std::string_view> isKeeyScopeFocused_bind;
        std::optional<std::string_view> navCycleMode;
        std::optional<std::string_view> navCycleMode_bind;

        IXmlFactory_VisualElement()
        {
            using namespace literal;

            xml_name = u"VisualElement"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.VisualElement"_name;
            
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };

    class OGUI_API IXmlFactory_Instance : public OGUI::IXmlFactory_VisualElement
    {
    public:
        std::string_view template_name;
        std::optional<std::string_view> template_name_bind;

        IXmlFactory_Instance()
        {
            using namespace literal;

            xml_name = u"Instance"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.Instance"_name;
            
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };

    class OGUI_API IXmlFactory_Text : public OGUI::IXmlFactory_VisualElement
    {
    public:


        IXmlFactory_Text()
        {
            using namespace literal;

            xml_name = u"Text"_name;
            xml_namespace = u"OGUI"_name;
            xml_qualified_name = u"OGUI.Text"_name;
            mixed = true;
        }

        virtual bool InitAttribute(VisualElement& new_element, const XmlElement& Asset, CreationContext& context) override;
        virtual VisualElement* Create(const XmlElement& asset, CreationContext& context) override;
        void Internal_Init();
        bool Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr);
    };


}