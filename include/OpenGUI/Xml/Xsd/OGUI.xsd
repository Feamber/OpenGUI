<?xml version="1.0" encoding="utf-8"?>
<xs:schema elementFormDefault="qualified" xmlns:engine="OGUI" targetNamespace="OGUI" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <!-- {h}给.h文件最上方添加代码 -->
    <!-- {cpp}给.cpp文件最上方添加代码 -->
    <xs:documentation>{cpp}#define DLL_IMPLEMENTATION</xs:documentation>
    <xs:documentation>{cpp}#include "OpenGUI/Xml/XsdGen/OGUI.h"</xs:documentation>
    <xs:documentation>{xx_API}OGUI_API</xs:documentation>
  </xs:annotation>

  <xs:simpleType name="ENavMode" id="ENavMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Horizontal" />
      <xs:enumeration value="Vertical" />
      <xs:enumeration value="Automatic" />
      <!-- <xs:enumeration value="Explicit" /> 还没实现 -->
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ENavCycleMode"  id="ENavCycleMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Horizontal" />
      <xs:enumeration value="Vertical" />
      <xs:enumeration value="Automatic" />
    </xs:restriction>
  </xs:simpleType>

  <!--  要和下面的 xs:element 定义对应 -->
  <!-- <xs:element name="Root" type="engine:RootType" /> -->
  <!-- 类型名一定是 元素名 + Type -->
  <!--  All Type  -->
  <xs:complexType name="RootType">
    <xs:complexContent mixed="false">
      <xs:restriction base="xs:anyType">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Template" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:VisualElement" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Text" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Style" />
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StyleType">
    <xs:complexContent mixed="false">
      <xs:restriction base="xs:anyType">
        <xs:attribute name="path" type="xs:string" use="required" />
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TemplateType">
    <xs:complexContent mixed="false">
      <xs:restriction base="xs:anyType">
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="path" type="xs:string" use="required" />
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeOverridesType">
    <xs:complexContent mixed="false">
      <xs:restriction base="xs:anyType">
        <xs:attribute name="element_name" type="xs:string" use="required" />
        <xs:anyAttribute processContents="lax" />
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VisualElementType">
    <xs:complexContent mixed="false">
      <xs:restriction base="xs:anyType">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:VisualElement" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Text" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Style" />
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="optional" />
        <xs:attribute name="path" type="xs:string" use="optional" />
        <xs:attribute name="style" type="xs:string" use="optional" />
        <xs:attribute name="class_tag" type="xs:string" use="optional" />
        <xs:attribute name="slot_name" type="xs:string" use="optional" />
        <xs:attribute name="slot" type="xs:string" use="optional" />
        <xs:attribute name="focusable" type="xs:boolean" use="optional" />
        <xs:attribute name="navMode" type="engine:ENavMode" use="optional" />
        <xs:attribute name="isFocusScope" type="xs:boolean" use="optional" />
        <xs:attribute name="isKeeyScopeFocused" type="xs:boolean" use="optional" />
        <xs:attribute name="navCycleMode" type="engine:ENavCycleMode" use="optional" />
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InstanceType">
    <xs:complexContent mixed="false">
      <xs:extension base="engine:VisualElementType">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:AttributeOverrides" />
        </xs:sequence>
        <xs:attribute name="template_name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TextType">
    <xs:annotation>
      <!-- {base}命名空间:父类型 是用来开洞，强行继承指定的类型，为了绕过<xs:complexContent mixed="true">没法继承VisualElementType -->
      <!-- 注意 命名空间要直接用全名，比如 engine:VisualElementType 要写成 OGUI:VisualElementType -->
      <xs:documentation>{base}OGUI:VisualElementType</xs:documentation>
    </xs:annotation>
    <xs:complexContent mixed="true">
      <xs:restriction base="xs:anyType">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:VisualElement" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Text" />
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="engine:Style" />
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="optional" />
        <xs:attribute name="path" type="xs:string" use="optional" />
        <xs:attribute name="style" type="xs:string" use="optional" />
        <xs:attribute name="class_tag" type="xs:string" use="optional" />
        <xs:attribute name="slot_name" type="xs:string" use="optional" />
        <xs:attribute name="slot" type="xs:string" use="optional" />
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <!-- 子类继承父类 substitutionGroup="父类型对应的元素" type=“子类型（子类型要使用xs:extension继承父类型）” -->
  <!-- <xs:element name="Instance" substitutionGroup="engine:VisualElement" type="engine:InstanceType" /> -->
  <!--  All Element  -->
  <xs:element name="Root" type="engine:RootType" />
  <xs:element name="Style" type="engine:StyleType" />
  <xs:element name="Template" type="engine:TemplateType" />
  <xs:element name="AttributeOverrides" type="engine:AttributeOverridesType" />

  <xs:element name="VisualElement" type="engine:VisualElementType" />
  <xs:element name="Instance" substitutionGroup="engine:VisualElement" type="engine:InstanceType" />
  <xs:element name="Text" type="engine:TextType" />
</xs:schema>