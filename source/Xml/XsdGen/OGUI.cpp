// This file is auto-generated by XsdGen

#define DLL_IMPLEMENTATION
#include "OpenGUI/Xml/XsdGen/OGUI.h"


namespace OGUI
{
    void IXmlFactory_Root::Internal_Init()
    {
        OGUI::IXmlFactory::Internal_Init();

    }

    bool IXmlFactory_Root::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory::Internal_InitAttribute(attr_name_hash, attr);

        return false;
    }

    void IXmlFactory_Style::Internal_Init()
    {
        OGUI::IXmlFactory::Internal_Init();
        path = "";
    }

    bool IXmlFactory_Style::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory::Internal_InitAttribute(attr_name_hash, attr);
        switch (const Name& __str = attr.name; attr_name_hash)
        {
            casestr("path") if(attr.value.size() > 0 && attr.value.front() == '$') path_bind.emplace(attr.value); else path = attr.value; return true;
            default: return false;
        }
        return false;
    }

    void IXmlFactory_Template::Internal_Init()
    {
        OGUI::IXmlFactory::Internal_Init();
        name = "";
        path = "";
    }

    bool IXmlFactory_Template::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory::Internal_InitAttribute(attr_name_hash, attr);
        switch (const Name& __str = attr.name; attr_name_hash)
        {
            casestr("name") if(attr.value.size() > 0 && attr.value.front() == '$') name_bind.emplace(attr.value); else name = attr.value; return true;
            casestr("path") if(attr.value.size() > 0 && attr.value.front() == '$') path_bind.emplace(attr.value); else path = attr.value; return true;
            default: return false;
        }
        return false;
    }

    void IXmlFactory_AttributeOverrides::Internal_Init()
    {
        OGUI::IXmlFactory::Internal_Init();
        element_name = "";
    }

    bool IXmlFactory_AttributeOverrides::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory::Internal_InitAttribute(attr_name_hash, attr);
        switch (const Name& __str = attr.name; attr_name_hash)
        {
            casestr("element_name") if(attr.value.size() > 0 && attr.value.front() == '$') element_name_bind.emplace(attr.value); else element_name = attr.value; return true;
            default: return false;
        }
        return false;
    }

    void IXmlFactory_VisualElement::Internal_Init()
    {
        OGUI::IXmlFactory::Internal_Init();
        name.reset();
        name_bind.reset();
        path.reset();
        path_bind.reset();
        style.reset();
        style_bind.reset();
        class_tag.reset();
        class_tag_bind.reset();
        slot_name.reset();
        slot_name_bind.reset();
        slot.reset();
        slot_bind.reset();
        focusable.reset();
        focusable_bind.reset();
        navMode.reset();
        navMode_bind.reset();
        navExplicitUp.reset();
        navExplicitUp_bind.reset();
        navExplicitDown.reset();
        navExplicitDown_bind.reset();
        navExplicitLeft.reset();
        navExplicitLeft_bind.reset();
        navExplicitRight.reset();
        navExplicitRight_bind.reset();
        isFocusScope.reset();
        isFocusScope_bind.reset();
        isKeeyScopeFocused.reset();
        isKeeyScopeFocused_bind.reset();
        navCycleMode.reset();
        navCycleMode_bind.reset();
    }

    bool IXmlFactory_VisualElement::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory::Internal_InitAttribute(attr_name_hash, attr);
        switch (const Name& __str = attr.name; attr_name_hash)
        {
            casestr("name") if(attr.value.size() > 0 && attr.value.front() == '$') name_bind.emplace(attr.value); else name.emplace(attr.value); return true;
            casestr("path") if(attr.value.size() > 0 && attr.value.front() == '$') path_bind.emplace(attr.value); else path.emplace(attr.value); return true;
            casestr("style") if(attr.value.size() > 0 && attr.value.front() == '$') style_bind.emplace(attr.value); else style.emplace(attr.value); return true;
            casestr("class_tag") if(attr.value.size() > 0 && attr.value.front() == '$') class_tag_bind.emplace(attr.value); else class_tag.emplace(attr.value); return true;
            casestr("slot_name") if(attr.value.size() > 0 && attr.value.front() == '$') slot_name_bind.emplace(attr.value); else slot_name.emplace(attr.value); return true;
            casestr("slot") if(attr.value.size() > 0 && attr.value.front() == '$') slot_bind.emplace(attr.value); else slot.emplace(attr.value); return true;
            casestr("focusable") if(attr.value.size() > 0 && attr.value.front() == '$') focusable_bind.emplace(attr.value); else focusable.emplace(attr.value == "true" || attr.value == "1" ? true : false); return true;
            casestr("navMode") if(attr.value.size() > 0 && attr.value.front() == '$') navMode_bind.emplace(attr.value); else navMode.emplace(attr.value); return true;
            casestr("navExplicitUp") if(attr.value.size() > 0 && attr.value.front() == '$') navExplicitUp_bind.emplace(attr.value); else navExplicitUp.emplace(attr.value); return true;
            casestr("navExplicitDown") if(attr.value.size() > 0 && attr.value.front() == '$') navExplicitDown_bind.emplace(attr.value); else navExplicitDown.emplace(attr.value); return true;
            casestr("navExplicitLeft") if(attr.value.size() > 0 && attr.value.front() == '$') navExplicitLeft_bind.emplace(attr.value); else navExplicitLeft.emplace(attr.value); return true;
            casestr("navExplicitRight") if(attr.value.size() > 0 && attr.value.front() == '$') navExplicitRight_bind.emplace(attr.value); else navExplicitRight.emplace(attr.value); return true;
            casestr("isFocusScope") if(attr.value.size() > 0 && attr.value.front() == '$') isFocusScope_bind.emplace(attr.value); else isFocusScope.emplace(attr.value == "true" || attr.value == "1" ? true : false); return true;
            casestr("isKeeyScopeFocused") if(attr.value.size() > 0 && attr.value.front() == '$') isKeeyScopeFocused_bind.emplace(attr.value); else isKeeyScopeFocused.emplace(attr.value == "true" || attr.value == "1" ? true : false); return true;
            casestr("navCycleMode") if(attr.value.size() > 0 && attr.value.front() == '$') navCycleMode_bind.emplace(attr.value); else navCycleMode.emplace(attr.value); return true;
            default: return false;
        }
        return false;
    }

    void IXmlFactory_Instance::Internal_Init()
    {
        OGUI::IXmlFactory_VisualElement::Internal_Init();
        template_name = "";
    }

    bool IXmlFactory_Instance::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory_VisualElement::Internal_InitAttribute(attr_name_hash, attr);
        switch (const Name& __str = attr.name; attr_name_hash)
        {
            casestr("template_name") if(attr.value.size() > 0 && attr.value.front() == '$') template_name_bind.emplace(attr.value); else template_name = attr.value; return true;
            default: return false;
        }
        return false;
    }

    void IXmlFactory_Text::Internal_Init()
    {
        OGUI::IXmlFactory_VisualElement::Internal_Init();

    }

    bool IXmlFactory_Text::Internal_InitAttribute(size_t attr_name_hash, const XmlAttribute& attr)
    {
        OGUI::IXmlFactory_VisualElement::Internal_InitAttribute(attr_name_hash, attr);

        return false;
    }


}